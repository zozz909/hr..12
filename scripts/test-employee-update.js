const mysql = require('mysql2/promise');

async function testEmployeeUpdate() {
  let connection;
  
  try {
    connection = await mysql.createConnection({
      host: 'localhost',
      user: 'root',
      password: '123',
      database: 'hr_system'
    });

    console.log('ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ');

    // Get first employee for testing
    const [employees] = await connection.execute(`
      SELECT id, name, mobile, email, nationality, position, salary, hire_date, institution_id
      FROM employees 
      WHERE status = 'active'
      LIMIT 1
    `);

    if (employees.length === 0) {
      console.log('โ ูุง ููุฌุฏ ููุธููู ููุงุฎุชุจุงุฑ');
      return;
    }

    const employee = employees[0];
    console.log('\n๐ค ุงูููุธู ุงููุฎุชุงุฑ ููุงุฎุชุจุงุฑ:');
    console.log('='.repeat(50));
    console.log(`๐ ุงููุนุฑู: ${employee.id}`);
    console.log(`๐ค ุงูุงุณู: ${employee.name}`);
    console.log(`๐ฑ ุงูุฌูุงู: ${employee.mobile || 'ุบูุฑ ูุญุฏุฏ'}`);
    console.log(`๐ง ุงูุจุฑูุฏ: ${employee.email || 'ุบูุฑ ูุญุฏุฏ'}`);
    console.log(`๐ณ๏ธ ุงูุฌูุณูุฉ: ${employee.nationality || 'ุบูุฑ ูุญุฏุฏ'}`);
    console.log(`๐ผ ุงูููุตุจ: ${employee.position || 'ุบูุฑ ูุญุฏุฏ'}`);
    console.log(`๐ฐ ุงูุฑุงุชุจ: ${employee.salary || 'ุบูุฑ ูุญุฏุฏ'} ุฑูุงู`);
    console.log(`๐ ุชุงุฑูุฎ ุงูุชูุธูู: ${employee.hire_date || 'ุบูุฑ ูุญุฏุฏ'}`);
    console.log(`๐ข ุงููุคุณุณุฉ: ${employee.institution_id || 'ุบูุฑ ููููู'}`);

    // Test update with new data
    const testData = {
      name: employee.name + ' (ูุญุฏุซ)',
      mobile: '0501234567',
      email: 'updated@test.com',
      nationality: 'ุณุนูุฏู',
      position: 'ูุทูุฑ ุจุฑูุฌูุงุช ุฃูู',
      salary: 8500,
      hireDate: '2024-01-15'
    };

    console.log('\n๐ ุงุฎุชุจุงุฑ ุงูุชุญุฏูุซ ุจุงูุจูุงูุงุช ุงูุฌุฏูุฏุฉ:');
    console.log('='.repeat(50));
    console.log(`๐ค ุงูุงุณู ุงูุฌุฏูุฏ: ${testData.name}`);
    console.log(`๐ฑ ุงูุฌูุงู ุงูุฌุฏูุฏ: ${testData.mobile}`);
    console.log(`๐ง ุงูุจุฑูุฏ ุงูุฌุฏูุฏ: ${testData.email}`);
    console.log(`๐ณ๏ธ ุงูุฌูุณูุฉ ุงูุฌุฏูุฏุฉ: ${testData.nationality}`);
    console.log(`๐ผ ุงูููุตุจ ุงูุฌุฏูุฏ: ${testData.position}`);
    console.log(`๐ฐ ุงูุฑุงุชุจ ุงูุฌุฏูุฏ: ${testData.salary} ุฑูุงู`);
    console.log(`๐ ุชุงุฑูุฎ ุงูุชูุธูู ุงูุฌุฏูุฏ: ${testData.hireDate}`);

    // Perform update
    const updateResult = await connection.execute(`
      UPDATE employees 
      SET 
        name = ?,
        mobile = ?,
        email = ?,
        nationality = ?,
        position = ?,
        salary = ?,
        hire_date = ?,
        updated_at = CURRENT_TIMESTAMP
      WHERE id = ?
    `, [
      testData.name,
      testData.mobile,
      testData.email,
      testData.nationality,
      testData.position,
      testData.salary,
      testData.hireDate,
      employee.id
    ]);

    if (updateResult.affectedRows > 0) {
      console.log('\nโ ุชู ุงูุชุญุฏูุซ ุจูุฌุงุญ!');

      // Get updated data
      const [updatedEmployees] = await connection.execute(`
        SELECT id, name, mobile, email, nationality, position, salary, hire_date, institution_id, updated_at
        FROM employees 
        WHERE id = ?
      `, [employee.id]);

      if (updatedEmployees.length > 0) {
        const updatedEmployee = updatedEmployees[0];
        console.log('\n๐ ุงูุจูุงูุงุช ุจุนุฏ ุงูุชุญุฏูุซ:');
        console.log('='.repeat(50));
        console.log(`๐ค ุงูุงุณู: ${updatedEmployee.name}`);
        console.log(`๐ฑ ุงูุฌูุงู: ${updatedEmployee.mobile}`);
        console.log(`๐ง ุงูุจุฑูุฏ: ${updatedEmployee.email}`);
        console.log(`๐ณ๏ธ ุงูุฌูุณูุฉ: ${updatedEmployee.nationality}`);
        console.log(`๐ผ ุงูููุตุจ: ${updatedEmployee.position}`);
        console.log(`๐ฐ ุงูุฑุงุชุจ: ${updatedEmployee.salary} ุฑูุงู`);
        console.log(`๐ ุชุงุฑูุฎ ุงูุชูุธูู: ${updatedEmployee.hire_date}`);
        console.log(`๐ ุขุฎุฑ ุชุญุฏูุซ: ${updatedEmployee.updated_at}`);

        // Test API-like update (partial update)
        console.log('\n๐งช ุงุฎุชุจุงุฑ ุงูุชุญุฏูุซ ุงูุฌุฒุฆู (ูุซู API):');
        console.log('='.repeat(50));
        
        const partialUpdate = {
          email: 'partial-update@test.com',
          salary: 9000
        };

        console.log(`๐ง ุชุญุฏูุซ ุงูุจุฑูุฏ ุฅูู: ${partialUpdate.email}`);
        console.log(`๐ฐ ุชุญุฏูุซ ุงูุฑุงุชุจ ุฅูู: ${partialUpdate.salary} ุฑูุงู`);

        const partialResult = await connection.execute(`
          UPDATE employees 
          SET 
            email = ?,
            salary = ?,
            updated_at = CURRENT_TIMESTAMP
          WHERE id = ?
        `, [partialUpdate.email, partialUpdate.salary, employee.id]);

        if (partialResult.affectedRows > 0) {
          console.log('โ ุชู ุงูุชุญุฏูุซ ุงูุฌุฒุฆู ุจูุฌุงุญ!');

          // Get final data
          const [finalEmployees] = await connection.execute(`
            SELECT name, mobile, email, nationality, position, salary, hire_date, updated_at
            FROM employees 
            WHERE id = ?
          `, [employee.id]);

          if (finalEmployees.length > 0) {
            const finalEmployee = finalEmployees[0];
            console.log('\n๐ ุงูุจูุงูุงุช ุงูููุงุฆูุฉ:');
            console.log('='.repeat(50));
            console.log(`๐ค ุงูุงุณู: ${finalEmployee.name}`);
            console.log(`๐ฑ ุงูุฌูุงู: ${finalEmployee.mobile}`);
            console.log(`๐ง ุงูุจุฑูุฏ: ${finalEmployee.email} โจ`);
            console.log(`๐ณ๏ธ ุงูุฌูุณูุฉ: ${finalEmployee.nationality}`);
            console.log(`๐ผ ุงูููุตุจ: ${finalEmployee.position}`);
            console.log(`๐ฐ ุงูุฑุงุชุจ: ${finalEmployee.salary} ุฑูุงู โจ`);
            console.log(`๐ ุชุงุฑูุฎ ุงูุชูุธูู: ${finalEmployee.hire_date}`);
            console.log(`๐ ุขุฎุฑ ุชุญุฏูุซ: ${finalEmployee.updated_at}`);
          }
        }
      }
    } else {
      console.log('โ ูุดู ูู ุงูุชุญุฏูุซ');
    }

    console.log('\n๐ ุงูุชูู ุงุฎุชุจุงุฑ ุชุญุฏูุซ ุงูููุธู ุจูุฌุงุญ!');
    console.log('\n๐ ุงูุญููู ุงูุชู ุชู ุงุฎุชุจุงุฑูุง:');
    console.log('โ ุงูุงุณู - ุชู ุงูุชุญุฏูุซ');
    console.log('โ ุงูุฌูุงู - ุชู ุงูุชุญุฏูุซ');
    console.log('โ ุงูุจุฑูุฏ ุงูุฅููุชุฑููู - ุชู ุงูุชุญุฏูุซ');
    console.log('โ ุงูุฌูุณูุฉ - ุชู ุงูุชุญุฏูุซ');
    console.log('โ ุงูููุตุจ - ุชู ุงูุชุญุฏูุซ');
    console.log('โ ุงูุฑุงุชุจ - ุชู ุงูุชุญุฏูุซ');
    console.log('โ ุชุงุฑูุฎ ุงูุชูุธูู - ุชู ุงูุชุญุฏูุซ');
    console.log('โ ุงูุชุญุฏูุซ ุงูุฌุฒุฆู - ูุนูู ุจุดูู ุตุญูุญ');

  } catch (error) {
    console.error('ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ุชุญุฏูุซ ุงูููุธู:', error);
  } finally {
    if (connection) {
      await connection.end();
      console.log('\nุชู ุฅุบูุงู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช');
    }
  }
}

// ุชุดุบูู ุงูุงุฎุชุจุงุฑ
testEmployeeUpdate();
