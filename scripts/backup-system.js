const { backupManager, backupScheduler } = require('../src/lib/backup/backup-manager')

async function runBackupSystem() {
  console.log('๐ ุจุฏุก ูุธุงู ุงููุณุฎ ุงูุงุญุชูุงุทู...')
  
  try {
    // Initialize backup system
    await backupManager.initialize()
    
    // Get command line arguments
    const args = process.argv.slice(2)
    const command = args[0]
    
    switch (command) {
      case 'create':
        console.log('๐ฆ ุฅูุดุงุก ูุณุฎุฉ ุงุญุชูุงุทูุฉ...')
        const backup = await backupManager.createFullBackup()
        console.log('โ ุชู ุฅูุดุงุก ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ:', backup.filename)
        break
        
      case 'list':
        console.log('๐ ูุงุฆูุฉ ุงููุณุฎ ุงูุงุญุชูุงุทูุฉ:')
        const backups = await backupManager.listBackups()
        if (backups.length === 0) {
          console.log('ูุง ุชูุฌุฏ ูุณุฎ ุงุญุชูุงุทูุฉ')
        } else {
          backups.forEach(backup => {
            console.log(`- ${backup.filename} (${formatFileSize(backup.size)}) - ${new Date(backup.createdAt).toLocaleString('ar-SA')}`)
          })
        }
        break
        
      case 'restore':
        const filename = args[1]
        if (!filename) {
          console.error('โ ูุฑุฌู ุชุญุฏูุฏ ุงุณู ุงูููู ููุงุณุชุนุงุฏุฉ')
          process.exit(1)
        }
        console.log(`๐ ุงุณุชุนุงุฏุฉ ูู ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ: ${filename}`)
        await backupManager.restoreFromBackup(filename)
        console.log('โ ุชูุช ุงูุงุณุชุนุงุฏุฉ ุจูุฌุงุญ')
        break
        
      case 'clean':
        console.log('๐งน ุชูุธูู ุงููุณุฎ ุงูุงุญุชูุงุทูุฉ ุงููุฏููุฉ...')
        await backupManager.cleanOldBackups()
        console.log('โ ุชู ุชูุธูู ุงููุณุฎ ุงููุฏููุฉ')
        break
        
      case 'schedule':
        const hours = parseInt(args[1]) || 24
        console.log(`โฐ ุฌุฏููุฉ ุงููุณุฎ ุงูุงุญุชูุงุทูุฉ ูู ${hours} ุณุงุนุฉ`)
        backupScheduler.scheduleBackups(hours)
        
        // Keep the process running
        process.on('SIGINT', () => {
          console.log('\n๐ ุฅููุงู ุงููุณุฎ ุงูุงุญุชูุงุทู ุงููุฌุฏูู...')
          backupScheduler.stopScheduledBackups()
          process.exit(0)
        })
        
        console.log('โ ุชู ุชูุนูู ุงููุณุฎ ุงูุงุญุชูุงุทู ุงููุฌุฏูู (ุงุถุบุท Ctrl+C ููุฅููุงู)')
        break
        
      case 'auto':
        console.log('๐ค ุชุดุบูู ุงููุณุฎ ุงูุงุญุชูุงุทู ุงูุชููุงุฆู...')
        
        // Create initial backup
        await backupManager.createFullBackup()
        
        // Schedule regular backups (every 6 hours)
        backupScheduler.scheduleBackups(6)
        
        // Clean old backups daily
        setInterval(async () => {
          try {
            await backupManager.cleanOldBackups()
          } catch (error) {
            console.error('ุฎุทุฃ ูู ุชูุธูู ุงููุณุฎ ุงููุฏููุฉ:', error)
          }
        }, 24 * 60 * 60 * 1000) // 24 hours
        
        // Keep the process running
        process.on('SIGINT', () => {
          console.log('\n๐ ุฅููุงู ุงููุธุงู ุงูุชููุงุฆู...')
          backupScheduler.stopScheduledBackups()
          process.exit(0)
        })
        
        console.log('โ ุงููุธุงู ุงูุชููุงุฆู ูุนูู (ุงุถุบุท Ctrl+C ููุฅููุงู)')
        break
        
      default:
        console.log(`
๐ ุงุณุชุฎุฏุงู ูุธุงู ุงููุณุฎ ุงูุงุญุชูุงุทู:

ุงูุฃูุงูุฑ ุงููุชุงุญุฉ:
  create              ุฅูุดุงุก ูุณุฎุฉ ุงุญุชูุงุทูุฉ ุฌุฏูุฏุฉ
  list                ุนุฑุถ ูุงุฆูุฉ ุงููุณุฎ ุงูุงุญุชูุงุทูุฉ
  restore <filename>  ุงุณุชุนุงุฏุฉ ูู ูุณุฎุฉ ุงุญุชูุงุทูุฉ
  clean               ุญุฐู ุงููุณุฎ ุงูุงุญุชูุงุทูุฉ ุงููุฏููุฉ
  schedule [hours]    ุฌุฏููุฉ ุงููุณุฎ ุงูุงุญุชูุงุทูุฉ (ุงูุชุฑุงุถู: 24 ุณุงุนุฉ)
  auto                ุชุดุบูู ุงููุธุงู ุงูุชููุงุฆู (ูุณุฎ ูู 6 ุณุงุนุงุช)

ุฃูุซูุฉ:
  node scripts/backup-system.js create
  node scripts/backup-system.js list
  node scripts/backup-system.js restore backup_1234567890_2024-01-01.sql.gz
  node scripts/backup-system.js schedule 12
  node scripts/backup-system.js auto
        `)
        break
    }
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ูุธุงู ุงููุณุฎ ุงูุงุญุชูุงุทู:', error)
    process.exit(1)
  }
}

function formatFileSize(bytes) {
  const sizes = ['Bytes', 'KB', 'MB', 'GB']
  if (bytes === 0) return '0 Bytes'
  const i = Math.floor(Math.log(bytes) / Math.log(1024))
  return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i]
}

// Handle unhandled promise rejections
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason)
  process.exit(1)
})

// Run the backup system
runBackupSystem()
